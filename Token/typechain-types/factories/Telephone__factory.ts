/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Telephone, TelephoneInterface } from "../Telephone";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "changeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610200806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063a6f9dae114610059575b600080fd5b610043610075565b6040516100509190610151565b60405180910390f35b610073600480360381019061006e919061019d565b610099565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461010d57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061013b82610110565b9050919050565b61014b81610130565b82525050565b60006020820190506101666000830184610142565b92915050565b600080fd5b61017a81610130565b811461018557600080fd5b50565b60008135905061019781610171565b92915050565b6000602082840312156101b3576101b261016c565b5b60006101c184828501610188565b9150509291505056fea2646970667358221220da58c1951f3a68cda07a4618ba1f05c6d744bf3cd27390d5ad874026dae1307564736f6c63430008090033";

type TelephoneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TelephoneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Telephone__factory extends ContractFactory {
  constructor(...args: TelephoneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Telephone> {
    return super.deploy(overrides || {}) as Promise<Telephone>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Telephone {
    return super.attach(address) as Telephone;
  }
  override connect(signer: Signer): Telephone__factory {
    return super.connect(signer) as Telephone__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TelephoneInterface {
    return new utils.Interface(_abi) as TelephoneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Telephone {
    return new Contract(address, _abi, signerOrProvider) as Telephone;
  }
}
