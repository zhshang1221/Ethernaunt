/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Attacker, AttackerInterface } from "../Attacker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_force",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "give",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040516101a13803806101a1833981810160405281019061002591906100ce565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100fb565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009b82610070565b9050919050565b6100ab81610090565b81146100b657600080fd5b50565b6000815190506100c8816100a2565b92915050565b6000602082840312156100e4576100e361006b565b5b60006100f2848285016100b9565b91505092915050565b6098806101096000396000f3fe608060405260043610601c5760003560e01c80639e96a23a146021575b600080fd5b60276029565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16fffea26469706673582212203765ad80115f68a85b0eead409a609bec98df0ceaed504fca2df97c4849d47c564736f6c63430008090033";

type AttackerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attacker__factory extends ContractFactory {
  constructor(...args: AttackerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _force: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Attacker> {
    return super.deploy(_force, overrides || {}) as Promise<Attacker>;
  }
  override getDeployTransaction(
    _force: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_force, overrides || {});
  }
  override attach(address: string): Attacker {
    return super.attach(address) as Attacker;
  }
  override connect(signer: Signer): Attacker__factory {
    return super.connect(signer) as Attacker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackerInterface {
    return new utils.Interface(_abi) as AttackerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Attacker {
    return new Contract(address, _abi, signerOrProvider) as Attacker;
  }
}
